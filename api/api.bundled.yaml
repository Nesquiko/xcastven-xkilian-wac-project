openapi: 3.0.4
info:
  title: MediCal API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: Auth
  - name: Appointments
  - name: Doctors
  - name: Patients
  - name: Medical History
  - name: Resources
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '201':
          description: User registered successfully. Returns the created user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                createdPatient:
                  summary: Example created patient response
                  value:
                    id: a1b2c3d4-e5f6-7890-1234-567890abcdef
                    email: new.patient@example.com
                    firstName: Pat
                    lastName: Ient
                    role: patient
                createdDoctor:
                  summary: Example created doctor response
                  value:
                    id: b2c3d4e5-f6a7-8901-2345-67890abcde1
                    email: new.doctor@example.com
                    firstName: Doc
                    lastName: Tor
                    role: doctor
                    specialization: CARDIOLOGIST
        '409':
          description: Conflict - A user with the provided email already exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                duplicateEmail:
                  summary: Example duplicate email error (409)
                  value:
                    title: Conflict
                    status: 409
                    code: user.email-exists
                    detail: A user with email new.patient@example.com already exists.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      operationId: loginUser
      requestBody:
        description: User credentials for login.
        required: true
        content:
          application/json:
            schema:
              type: object
              title: LoginRequest
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address.
                  example: john.doe@example.com
                role:
                  type: string
                  description: The role the user is logging in as.
                  enum:
                    - patient
                    - doctor
                  example: patient
              required:
                - email
                - role
            examples:
              patientLogin:
                summary: Example patient login request
                value:
                  email: jane.roe@example.com
                  role: patient
              doctorLogin:
                summary: Example doctor login request
                value:
                  email: dr.house@example.com
                  role: doctor
      responses:
        '200':
          description: Login successful. Sets session cookie and returns user details.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session_id=abcde12345; Path=/; HttpOnly; Secure; SameSite=Lax
              description: Session cookie set upon successful login. Contains session identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid email or role combination (user not found).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                invalidCredentials:
                  summary: Example invalid credentials (401)
                  value:
                    title: Unauthorized
                    status: 401
                    code: auth.invalid-credentials
                    detail: No user found with the provided email and role.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
components:
  schemas:
    SpecializationEnum:
      type: string
      description: Medical specialization of a doctor.
      enum:
        - SURGEON
        - GASTROENTEROLOGIST
        - PEDIATRICIAN
        - DIAGNOSTICIAN
        - ENDOCRINOLOGIST
        - GENERAL_PRACTITIONER
        - CARDIOLOGIST
        - DERMATOLOGIST
        - NEUROLOGIST
        - ONCOLOGIST
        - ORTHOPEDIST
        - PSYCHIATRIST
        - RADIOLOGIST
        - UROLOGIST
        - OTHER
      example: DIAGNOSTICIAN
    DoctorRegistration:
      type: object
      properties:
        role:
          type: string
          const: doctor
        specialization:
          $ref: '#/components/schemas/SpecializationEnum'
      required:
        - role
        - specialization
    PatientRegistration:
      type: object
      properties:
        role:
          type: string
          const: patient
      required:
        - role
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - patient
            - doctor
      oneOf:
        - $ref: '#/components/schemas/Patient'
        - $ref: '#/components/schemas/Doctor'
      discriminator:
        propertyName: role
        mapping:
          patient: '#/components/schemas/Patient'
          doctor: '#/components/schemas/Doctor'
    Patient:
      allOf:
        - $ref: '#/components/schemas/User'
    Doctor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - specialization
          properties:
            specialization:
              $ref: '#/components/schemas/SpecializationEnum'
    ErrorDetail:
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
          description: Short, human-readable summary of the error type.
        code:
          type: string
          description: Unique, machine-readable error code (e.g., 'namespace.error-name').
        status:
          type: integer
          format: int
          description: HTTP status code for this error occurrence.
          minimum: 100
          maximum: 599
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence.
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail
  requestBodies:
    RegisterRequest:
      description: Doctor details for registration.
      required: true
      content:
        application/json:
          schema:
            type: object
            description: Data required to register a new user.
            properties:
              email:
                type: string
                format: email
                example: new.user@example.com
              firstName:
                type: string
                minLength: 1
                example: John
              lastName:
                type: string
                minLength: 1
                example: Doe
              role:
                type: string
                enum:
                  - patient
                  - doctor
                example: patient
            oneOf:
              - $ref: '#/components/schemas/PatientRegistration'
              - $ref: '#/components/schemas/DoctorRegistration'
            discriminator:
              propertyName: role
              mapping:
                patient: '#/components/schemas/DoctorRegistration'
                doctor: '#/components/schemas/DoctorRegistration'
  responses:
    InternalServerErrorResponse:
      description: An error occurred. See specific status code for details.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
          example:
            title: Internal server error
            status: 500
            code: internal.server.error
            detail: An unknwon server error occured
