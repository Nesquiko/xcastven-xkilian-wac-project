openapi: 3.0.4
info:
  title: MediCal API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: Auth
  - name: Appointments
  - name: Conditions
  - name: Doctors
  - name: Patients
  - name: Resources
  - name: Medical History
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        description: Doctor details for registration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: User registered successfully. Returns the created user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict - A user with the provided email already exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                duplicateEmail:
                  summary: Example duplicate email error (409)
                  value:
                    title: Conflict
                    status: 409
                    code: user.email-exists
                    detail: A user with email new.patient@example.com already exists.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      operationId: loginUser
      requestBody:
        description: User credentials for login.
        required: true
        content:
          application/json:
            schema:
              type: object
              title: LoginRequest
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address.
                  example: john.doe@example.com
                role:
                  $ref: '#/components/schemas/UserRole'
              required:
                - email
                - role
            examples:
              patientLogin:
                summary: Example patient login request
                value:
                  email: jane.roe@example.com
                  role: patient
              doctorLogin:
                summary: Example doctor login request
                value:
                  email: dr.house@example.com
                  role: doctor
      responses:
        '200':
          description: Login successful. Sets session cookie and returns user details.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session_id=abcde12345; Path=/; HttpOnly; Secure; SameSite=Lax
              description: Session cookie set upon successful login. Contains session identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid email or role combination (user not found).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                invalidCredentials:
                  summary: Example invalid credentials (401)
                  value:
                    title: Unauthorized
                    status: 401
                    code: auth.invalid-credentials
                    detail: No user found with the provided email and role.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /appointments:
    post:
      tags:
        - Appointments
      summary: Patient creates an appointment request
      operationId: requestAppointment
      requestBody:
        description: Basic info about the appointment request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAppointmentRequest'
      responses:
        '201':
          description: Appointment successfully requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientAppointment'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /appointments/{appointmentId}:
    post:
      tags:
        - Appointments
      description: Doctor either accepts or denies patients appointment request.
      summary: Decide appointment's status
      operationId: decideAppointment
      parameters:
        - $ref: '#/components/parameters/appointmentId'
      requestBody:
        description: Whether doctor accepts or denies patients appointment request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentDecision'
      responses:
        '200':
          description: Appointment successfully cancelled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorAppointment'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
    patch:
      tags:
        - Appointments
      description: Reschedules patients appointment, also changes state of the appointment to request.
      summary: Reschedule an appointment
      operationId: rescheduleAppointment
      parameters:
        - $ref: '#/components/parameters/appointmentId'
      requestBody:
        description: Reason for cancelling the appointment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentReschedule'
      responses:
        '200':
          description: Appointment successfully cancelled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientAppointment'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
    delete:
      tags:
        - Appointments
      summary: Cancel an appointment
      operationId: cancelAppointment
      parameters:
        - $ref: '#/components/parameters/appointmentId'
      requestBody:
        description: Reason for cancelling the appointment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCancellation'
      responses:
        '204':
          description: Appointment successfully cancelled.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /conditions:
    post:
      tags:
        - Conditions
        - Patients
      summary: Create a condition record for a patient
      operationId: createPatientCondition
      requestBody:
        description: Details of the condition to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCondition'
      responses:
        '201':
          description: Condition record created successfully. Returns the created condition details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionDisplay'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /conditions/{conditionId}:
    get:
      tags:
        - Conditions
      summary: Condition detail
      operationId: conditionDetail
      parameters:
        - $ref: '#/components/parameters/conditionId'
      responses:
        '200':
          description: Condition details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /medicine:
    post:
      tags:
        - Patient
        - Medical History
      summary: Create a medicine record for a patient
      operationId: createPatientMedicine
      requestBody:
        description: Details of the medicine to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMedicine'
      responses:
        '201':
          description: Medicine record created successfully. Returns the created medicine details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineDisplay'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /patients/{patientId}:
    get:
      tags:
        - Patients
      summary: Get patient by ID
      description: Retrieves the details of a specific patient by their unique identifier.
      operationId: getPatientById
      parameters:
        - $ref: '#/components/parameters/patientId'
      responses:
        '200':
          description: Successfully retrieved patient details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Not Found - The specified patient ID does not exist.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                patientNotFound:
                  summary: Example patient not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: patient.not-found
                    detail: Patient with ID f47ac10b-58cc-4372-a567-0e02b2c3d479 not found.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /patients/{patientId}/calendar:
    get:
      tags:
        - Patients
      summary: Get patient's calendar
      operationId: patientsCalendar
      parameters:
        - $ref: '#/components/parameters/patientId'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: Returned patient's calendar for a given time period
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientsCalendar'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /patients/{patientId}/medical-history/files:
    get:
      tags:
        - Medical History
      summary: Get medical history filenames
      operationId: patientsMedicalHistoryFiles
      parameters:
        - $ref: '#/components/parameters/patientId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Successfully retrieved the paginated list of medical history filenames.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistoryFileList'
              examples:
                fileListExample:
                  summary: Example list of medical history filenames
                  value:
                    files:
                      - consultation_notes_2023-11-20.docx
                      - xray_report_2024-02-01.pdf
                      - prescription_history_2024-05-01.txt
                      - lab_results_2024-05-10.pdf
                    pagination:
                      page: 0
                      pageSize: 10
                      total: 4
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /patients/{patientId}/appointment/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get appointment scheduled by patient
      operationId: patientsAppointment
      parameters:
        - $ref: '#/components/parameters/patientId'
        - $ref: '#/components/parameters/appointmentId'
      responses:
        '200':
          description: Appointment details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientAppointment'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /doctors/{doctorId}:
    get:
      tags:
        - Doctors
      summary: Get doctor by ID
      description: Retrieves the details of a specific doctor by their unique identifier.
      operationId: getDoctorById
      parameters:
        - $ref: '#/components/parameters/doctorId'
      responses:
        '200':
          description: Successfully retrieved doctor details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Not Found - The specified doctor ID does not exist.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              examples:
                doctorNotFound:
                  summary: Example doctor not found (404)
                  value:
                    title: Resource Not Found
                    status: 404
                    code: doctor.not-found
                    detail: Doctor with ID b2c3d4e5-f6a7-8901-2345-67890abcdef1 not found.
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /doctors/{doctorId}/calendar:
    get:
      tags:
        - Doctors
      summary: Get doctors's calendar
      operationId: doctorsCalendar
      parameters:
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: Returned doctor's calendar for a given time period
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorsCalendar'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /doctors/{doctorId}/appointment/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get appointment scheduled to a doctor
      operationId: doctorsAppointment
      parameters:
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/appointmentId'
      responses:
        '200':
          description: Appointment details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorAppointment'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /doctors/{doctorId}/timeslots:
    get:
      tags:
        - Doctors
      summary: Get doctor's timeslots for a specific date
      description: Retrieves a list of available and unavailable time slots for a given doctor ID and date.
      operationId: doctorsTimeslots
      parameters:
        - $ref: '#/components/parameters/doctorId'
        - $ref: '#/components/parameters/date'
      responses:
        '200':
          $ref: '#/components/responses/DoctorTimeslots'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  /resources/available:
    get:
      tags:
        - Resources
      summary: Get available resources for a time slot
      operationId: getAvailableResources
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/time'
      responses:
        '200':
          description: Successfully retrieved available resources for the specified time slot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableResources'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
components:
  schemas:
    UserRole:
      type: string
      enum:
        - patient
        - doctor
    PatientRegistration:
      type: object
      required:
        - email
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
          example: new.user@example.com
        firstName:
          type: string
          minLength: 1
          example: John
        lastName:
          type: string
          minLength: 1
          example: Doe
        role:
          $ref: '#/components/schemas/UserRole'
    SpecializationEnum:
      type: string
      description: Medical specialization of a doctor.
      enum:
        - SURGEON
        - GASTROENTEROLOGIST
        - PEDIATRICIAN
        - DIAGNOSTICIAN
        - ENDOCRINOLOGIST
        - GENERAL_PRACTITIONER
        - CARDIOLOGIST
        - DERMATOLOGIST
        - NEUROLOGIST
        - ONCOLOGIST
        - ORTHOPEDIST
        - PSYCHIATRIST
        - RADIOLOGIST
        - UROLOGIST
        - OTHER
      example: DIAGNOSTICIAN
    DoctorRegistration:
      allOf:
        - $ref: '#/components/schemas/PatientRegistration'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/UserRole'
            specialization:
              $ref: '#/components/schemas/SpecializationEnum'
          required:
            - role
            - specialization
    Registration:
      oneOf:
        - $ref: '#/components/schemas/PatientRegistration'
        - $ref: '#/components/schemas/DoctorRegistration'
      discriminator:
        propertyName: role
        mapping:
          patient: '#/components/schemas/PatientRegistration'
          doctor: '#/components/schemas/DoctorRegistration'
    Patient:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
    Doctor:
      allOf:
        - $ref: '#/components/schemas/Patient'
        - type: object
          required:
            - specialization
          properties:
            specialization:
              $ref: '#/components/schemas/SpecializationEnum'
    User:
      oneOf:
        - $ref: '#/components/schemas/Patient'
        - $ref: '#/components/schemas/Doctor'
      discriminator:
        propertyName: role
        mapping:
          patient: '#/components/schemas/Patient'
          doctor: '#/components/schemas/Doctor'
    ErrorDetail:
      type: object
      description: Standardized error details (RFC 9457).
      properties:
        title:
          type: string
          description: Short, human-readable summary of the error type.
        code:
          type: string
          description: Unique, machine-readable error code (e.g., 'namespace.error-name').
        status:
          type: integer
          format: int
          description: HTTP status code for this error occurrence.
          minimum: 100
          maximum: 599
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence.
      additionalProperties: true
      required:
        - title
        - code
        - status
        - detail
    AppointmentType:
      type: string
      description: The type of the appointment.
      enum:
        - regular_check
    NewAppointmentRequest:
      type: object
      required:
        - patientId
        - doctorId
        - appointmentDateTime
      properties:
        patientId:
          type: string
          format: uuid
        doctorId:
          type: string
          format: uuid
        appointmentDateTime:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/AppointmentType'
        conditionId:
          type: string
          format: uuid
        reason:
          type: string
          description: Reason for the appointment provided by the patient.
          example: Feeling unwell, general check-up needed.
    ConditionDisplay:
      type: object
      description: Basic info about a patient's condition.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - id
        - name
        - start
    AppointmentStatus:
      type: string
      description: The current status of the appointment.
      enum:
        - requested
        - canceled
        - scheduled
        - completed
        - denied
      example: scheduled
    AppointmentBase:
      type: object
      description: Contains basic information about an appointment.
      required:
        - id
        - appointmentDateTime
        - type
        - condition
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        appointmentDateTime:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/AppointmentType'
        condition:
          $ref: '#/components/schemas/ConditionDisplay'
        status:
          $ref: '#/components/schemas/AppointmentStatus'
        reason:
          type: string
          description: Reason for the appointment provided by the patient.
          example: Feeling unwell, general check-up needed.
    PatientAppointment:
      allOf:
        - $ref: '#/components/schemas/AppointmentBase'
        - type: object
          required:
            - doctor
          properties:
            doctor:
              $ref: '#/components/schemas/Doctor'
    AppointmentDecision:
      type: object
      description: Data required for staff to accept or reject an appointment request.
      properties:
        action:
          type: string
          description: The decision action to take on the appointment request.
          enum:
            - accept
            - reject
          example: accept
        reason:
          type: string
          description: Required reason if the action is 'reject'. Optional otherwise.
          example: Doctor schedule conflict. Please choose another time.
      required:
        - action
    Facility:
      type: object
      description: Represents a required facility resource.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the facility.
          example: fac-001-a2b3-c4d5-e6f7
        name:
          type: string
          description: Name of the facility.
          example: MRI Suite B
      required:
        - id
        - name
    Equipment:
      type: object
      description: Represents a required equipment resource.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the equipment.
          example: eqp-002-f7e6-d5c4-b3a2
        name:
          type: string
          description: Name of the equipment.
          example: Ultrasound Machine XG-5
      required:
        - id
        - name
    Medicine:
      type: object
      description: Represents a required medicine resource.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the medicine.
          example: med-003-9a8b-7c6d-5e4f
        name:
          type: string
          description: Name of the medicine.
          example: Anaesthetic XYZ
      required:
        - id
        - name
    DoctorAppointment:
      allOf:
        - $ref: '#/components/schemas/AppointmentBase'
        - type: object
          required:
            - patient
          properties:
            patient:
              $ref: '#/components/schemas/Patient'
            facilities:
              type: array
              description: List of required facilities for the appointment.
              items:
                $ref: '#/components/schemas/Facility'
            equipment:
              type: array
              description: List of required equipment for the appointment.
              items:
                $ref: '#/components/schemas/Equipment'
            medicine:
              type: array
              description: List of required medicine for the appointment.
              items:
                $ref: '#/components/schemas/Medicine'
    AppointmentCancellation:
      type: object
      description: Data required to cancel an appointment.
      properties:
        reason:
          type: string
          description: Optional reason provided for the cancellation.
          example: Feeling better, no longer need the consultation.
    AppointmentReschedule:
      type: object
      description: Data required for a patient to reschedule their appointment.
      properties:
        newAppointmentDateTime:
          type: string
          format: date-time
        reason:
          type: string
          description: Optional reason for rescheduling provided by the patient.
          example: Work conflict arose.
      required:
        - newAppointmentDateTime
    NewCondition:
      allOf:
        - $ref: '#/components/schemas/ConditionDisplay'
        - type: object
          properties:
            patientId:
              type: string
              format: uuid
          required:
            - patientId
    AppointmentDisplay:
      type: object
      description: Represents an appointment view.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the appointment.
          example: d4e5f6a7-b8c9-0123-4567-890abcdef123
        appointmentDateTime:
          type: string
          format: date-time
          description: The date time of the appointment.
        status:
          $ref: '#/components/schemas/AppointmentStatus'
      required:
        - id
        - appointmentDateTime
        - status
    Condition:
      allOf:
        - $ref: '#/components/schemas/ConditionDisplay'
        - type: object
          properties:
            appointments:
              type: array
              items:
                $ref: '#/components/schemas/AppointmentDisplay'
          required:
            - appointments
    MedicineDisplay:
      type: object
      description: Basic info about a patient's condition.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - id
        - name
        - start
    NewMedicine:
      allOf:
        - $ref: '#/components/schemas/MedicineDisplay'
        - type: object
          properties:
            patientId:
              type: string
              format: uuid
          required:
            - patientId
    PatientsCalendar:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentDisplay'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ConditionDisplay'
        medicine:
          type: array
          items:
            $ref: '#/components/schemas/MedicineDisplay'
    Pagination:
      type: object
      description: Structure for paginated list responses.
      properties:
        page:
          type: integer
          format: int
          description: Current page number (0-indexed).
          example: 0
        pageSize:
          type: integer
          format: int
          description: Number of items per page.
          example: 20
        total:
          type: integer
          format: int
          description: Total number of items available.
          example: 153
      required:
        - page
        - pageSize
        - total
    MedicalHistoryFileList:
      type: object
      description: A paginated list of medical history filenames for the authenticated patient.
      properties:
        files:
          type: array
          description: List of filenames for the medical history records on the current page.
          items:
            type: string
            description: Filename of a medical record document.
            example: lab_results_2024-01-15.pdf
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - files
        - pagination
    DoctorsCalendar:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentDisplay'
    TimeSlot:
      type: object
      description: Represents a single time slot for a doctor on a specific day.
      properties:
        time:
          type: string
          description: The time of the slot (HH:MM format, 24-hour clock).
          pattern: ^([01]\d|2[0-3]):([0-5]\d)$
          example: '09:30'
        status:
          type: string
          description: Indicates whether the time slot is available or not.
          enum:
            - available
            - unavailable
          example: available
      required:
        - time
        - status
    AvailableResources:
      type: object
      description: Lists of available resources (facilities, equipment, medicine) for a specific date and time slot.
      properties:
        facilities:
          type: array
          description: List of available facilities.
          items:
            $ref: '#/components/schemas/Facility'
        equipment:
          type: array
          description: List of available equipment.
          items:
            $ref: '#/components/schemas/Equipment'
        medicine:
          type: array
          description: List of available medicine (assuming medicine can be 'allocated' or has limited stock per slot).
          items:
            $ref: '#/components/schemas/Medicine'
      required:
        - facilities
        - equipment
        - medicine
  responses:
    InternalServerErrorResponse:
      description: An error occurred. See specific status code for details.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
          example:
            title: Internal server error
            status: 500
            code: internal.server.error
            detail: An unknwon server error occured
    DoctorTimeslots:
      description: Successfully retrieved the list of time slots.
      content:
        application/json:
          schema:
            type: object
            required:
              - slots
            properties:
              slots:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'
  parameters:
    appointmentId:
      name: appointmentId
      in: path
      required: true
      description: The unique identifier (UUID) of the appointment.
      schema:
        type: string
        format: uuid
      example: d4e5f6a7-b8c9-0123-4567-890abcdef123
    conditionId:
      name: conditionId
      in: path
      required: true
      description: The unique identifier (UUID) of a condition.
      schema:
        type: string
        format: uuid
      example: d4e5f6a7-b8c9-0123-4567-890abcdef123
    patientId:
      name: patientId
      in: path
      required: true
      description: The unique identifier (UUID) of the patient.
      schema:
        type: string
        format: uuid
      example: b2c3d4e5-f6a7-8901-2345-67890abcdef1
    from:
      name: from
      in: query
      required: true
      description: The specific day form which to retrieve resources.
      schema:
        type: string
        format: date
      example: '2024-07-15'
    to:
      name: to
      in: query
      description: The specific day to which to retrieve resources.
      schema:
        type: string
        format: date
      example: '2024-07-15'
    page:
      name: page
      in: query
      required: false
      description: The page number to retrieve (0-indexed).
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 1
    pageSize:
      name: pageSize
      in: query
      required: false
      description: The number of doctors to return per page.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 50
    doctorId:
      name: doctorId
      in: path
      required: true
      description: The unique identifier (UUID) of the doctor.
      schema:
        type: string
        format: uuid
      example: b2c3d4e5-f6a7-8901-2345-67890abcdef1
    date:
      name: date
      in: query
      required: true
      description: The specific day for which to retrieve timeslots (YYYY-MM-DD format).
      schema:
        type: string
        format: date
      example: '2024-07-15'
    time:
      name: time
      in: query
      required: true
      description: The time slot to check availability for (HH:MM format, 24-hour clock).
      schema:
        type: string
        pattern: ^([01]\d|2[0-3]):([0-5]\d)$
      example: '11:30'
