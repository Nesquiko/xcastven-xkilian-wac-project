/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AppointmentDisplay, Condition, ConditionDisplay, DoctorAppointment, PatientAppointment, PrescriptionDisplay } from "./api/generated";
export { AppointmentDisplay, Condition, ConditionDisplay, DoctorAppointment, PatientAppointment, PrescriptionDisplay } from "./api/generated";
export namespace Components {
    interface AmbulanceApp {
    }
    interface XcastvenXkilianAppointmentScheduler {
    }
    interface XcastvenXkilianProjectAppointmentDetail {
        "appointmentId": string;
        "handleCancelAppointment": (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleRescheduleAppointment": (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleResetSelection": () => void;
    }
    interface XcastvenXkilianProjectAppointmentsList {
        "appointments": Array<AppointmentDisplay>;
        "handleSelectAppointment": (appointment: AppointmentDisplay) => void;
    }
    interface XcastvenXkilianProjectCalendar {
        "appointments": Array<AppointmentDisplay>;
        "conditions": Array<ConditionDisplay>;
        "currentViewMonth": number;
        "currentViewYear": number;
        "getConditionsForDate": (date: Date) => Array<ConditionDisplay>;
        "getPrescriptionsForDate": (date: Date) => Array<PrescriptionDisplay>;
        "handleNextMonth": () => void;
        "handlePreviousMonth": () => void;
        "handleSelectAppointment": (appointment: AppointmentDisplay) => void;
        "handleSelectCondition": (condition: ConditionDisplay) => void;
        "handleSelectDate": (date: Date) => void;
        "handleSelectPrescription": (prescription: PrescriptionDisplay) => void;
        "hoveredConditionId": string;
        "hoveredPrescriptionId": string;
        "prescriptions": Array<PrescriptionDisplay>;
        "setHoveredConditionId": (value: string | null) => void;
        "setHoveredPrescriptionId": (value: string | null) => void;
    }
    interface XcastvenXkilianProjectConditionDetail {
        "conditionId": string;
        "handleResetSelection": () => void;
        "handleScheduleAppointmentFromCondition": (condition: Condition) => void;
        "handleSelectAppointment": (appointment: AppointmentDisplay) => void;
        "handleToggleConditionStatus": () => void;
    }
    interface XcastvenXkilianProjectConditionsList {
        "conditions": Array<ConditionDisplay>;
        "handleSelectCondition": (condition: ConditionDisplay) => void;
    }
    interface XcastvenXkilianProjectDrawer {
        "getAppointmentsForDate": (date: Date) => Array<AppointmentDisplay>;
        "getConditionsForDate": (date: Date) => Array<ConditionDisplay>;
        "getPrescriptionsForDate": (date: Date) => Array<PrescriptionDisplay>;
        "handleCancelAppointment": (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleRescheduleAppointment": (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleResetSelection": () => void;
        "handleScheduleAppointmentFromCondition": (condition: Condition) => void;
        "handleSelectAppointment": (appointment: AppointmentDisplay) => void;
        "handleSelectCondition": (condition: ConditionDisplay) => void;
        "handleSelectPrescription": (prescription: PrescriptionDisplay) => void;
        "handleToggleConditionStatus": () => void;
        "isDrawerOpen": boolean;
        "selectedAppointment": AppointmentDisplay;
        "selectedCondition": ConditionDisplay;
        "selectedDate": Date;
        "selectedPrescription": PrescriptionDisplay;
        "showLegend": boolean;
    }
    interface XcastvenXkilianProjectFooter {
        "handleRegisterCondition": () => void;
        "handleScheduleAppointment": () => void;
        "handleToggleLegendMenu": () => void;
    }
    interface XcastvenXkilianProjectHeader {
        "currentViewMonth": number;
        "currentViewYear": number;
        "handleNextMonth": () => void;
        "handlePreviousMonth": () => void;
        "handleYearChange": (event: Event) => void;
    }
    interface XcastvenXkilianProjectHomePage {
    }
    interface XcastvenXkilianProjectLegend {
        "handleResetSelection": () => void;
    }
    interface XcastvenXkilianProjectLogin {
    }
    interface XcastvenXkilianProjectPrescriptionDetail {
        "handleResetSelection": () => void;
        "prescriptionId": string;
    }
    interface XcastvenXkilianProjectPrescriptionsList {
        "handleSelectPrescription": (prescription: PrescriptionDisplay) => void;
        "prescriptions": Array<PrescriptionDisplay>;
    }
    interface XcastvenXkilianProjectRegister {
    }
}
declare global {
    interface HTMLAmbulanceAppElement extends Components.AmbulanceApp, HTMLStencilElement {
    }
    var HTMLAmbulanceAppElement: {
        prototype: HTMLAmbulanceAppElement;
        new (): HTMLAmbulanceAppElement;
    };
    interface HTMLXcastvenXkilianAppointmentSchedulerElement extends Components.XcastvenXkilianAppointmentScheduler, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianAppointmentSchedulerElement: {
        prototype: HTMLXcastvenXkilianAppointmentSchedulerElement;
        new (): HTMLXcastvenXkilianAppointmentSchedulerElement;
    };
    interface HTMLXcastvenXkilianProjectAppointmentDetailElement extends Components.XcastvenXkilianProjectAppointmentDetail, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectAppointmentDetailElement: {
        prototype: HTMLXcastvenXkilianProjectAppointmentDetailElement;
        new (): HTMLXcastvenXkilianProjectAppointmentDetailElement;
    };
    interface HTMLXcastvenXkilianProjectAppointmentsListElement extends Components.XcastvenXkilianProjectAppointmentsList, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectAppointmentsListElement: {
        prototype: HTMLXcastvenXkilianProjectAppointmentsListElement;
        new (): HTMLXcastvenXkilianProjectAppointmentsListElement;
    };
    interface HTMLXcastvenXkilianProjectCalendarElement extends Components.XcastvenXkilianProjectCalendar, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectCalendarElement: {
        prototype: HTMLXcastvenXkilianProjectCalendarElement;
        new (): HTMLXcastvenXkilianProjectCalendarElement;
    };
    interface HTMLXcastvenXkilianProjectConditionDetailElement extends Components.XcastvenXkilianProjectConditionDetail, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectConditionDetailElement: {
        prototype: HTMLXcastvenXkilianProjectConditionDetailElement;
        new (): HTMLXcastvenXkilianProjectConditionDetailElement;
    };
    interface HTMLXcastvenXkilianProjectConditionsListElement extends Components.XcastvenXkilianProjectConditionsList, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectConditionsListElement: {
        prototype: HTMLXcastvenXkilianProjectConditionsListElement;
        new (): HTMLXcastvenXkilianProjectConditionsListElement;
    };
    interface HTMLXcastvenXkilianProjectDrawerElement extends Components.XcastvenXkilianProjectDrawer, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectDrawerElement: {
        prototype: HTMLXcastvenXkilianProjectDrawerElement;
        new (): HTMLXcastvenXkilianProjectDrawerElement;
    };
    interface HTMLXcastvenXkilianProjectFooterElement extends Components.XcastvenXkilianProjectFooter, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectFooterElement: {
        prototype: HTMLXcastvenXkilianProjectFooterElement;
        new (): HTMLXcastvenXkilianProjectFooterElement;
    };
    interface HTMLXcastvenXkilianProjectHeaderElement extends Components.XcastvenXkilianProjectHeader, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectHeaderElement: {
        prototype: HTMLXcastvenXkilianProjectHeaderElement;
        new (): HTMLXcastvenXkilianProjectHeaderElement;
    };
    interface HTMLXcastvenXkilianProjectHomePageElement extends Components.XcastvenXkilianProjectHomePage, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectHomePageElement: {
        prototype: HTMLXcastvenXkilianProjectHomePageElement;
        new (): HTMLXcastvenXkilianProjectHomePageElement;
    };
    interface HTMLXcastvenXkilianProjectLegendElement extends Components.XcastvenXkilianProjectLegend, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectLegendElement: {
        prototype: HTMLXcastvenXkilianProjectLegendElement;
        new (): HTMLXcastvenXkilianProjectLegendElement;
    };
    interface HTMLXcastvenXkilianProjectLoginElement extends Components.XcastvenXkilianProjectLogin, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectLoginElement: {
        prototype: HTMLXcastvenXkilianProjectLoginElement;
        new (): HTMLXcastvenXkilianProjectLoginElement;
    };
    interface HTMLXcastvenXkilianProjectPrescriptionDetailElement extends Components.XcastvenXkilianProjectPrescriptionDetail, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectPrescriptionDetailElement: {
        prototype: HTMLXcastvenXkilianProjectPrescriptionDetailElement;
        new (): HTMLXcastvenXkilianProjectPrescriptionDetailElement;
    };
    interface HTMLXcastvenXkilianProjectPrescriptionsListElement extends Components.XcastvenXkilianProjectPrescriptionsList, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectPrescriptionsListElement: {
        prototype: HTMLXcastvenXkilianProjectPrescriptionsListElement;
        new (): HTMLXcastvenXkilianProjectPrescriptionsListElement;
    };
    interface HTMLXcastvenXkilianProjectRegisterElement extends Components.XcastvenXkilianProjectRegister, HTMLStencilElement {
    }
    var HTMLXcastvenXkilianProjectRegisterElement: {
        prototype: HTMLXcastvenXkilianProjectRegisterElement;
        new (): HTMLXcastvenXkilianProjectRegisterElement;
    };
    interface HTMLElementTagNameMap {
        "ambulance-app": HTMLAmbulanceAppElement;
        "xcastven-xkilian-appointment-scheduler": HTMLXcastvenXkilianAppointmentSchedulerElement;
        "xcastven-xkilian-project-appointment-detail": HTMLXcastvenXkilianProjectAppointmentDetailElement;
        "xcastven-xkilian-project-appointments-list": HTMLXcastvenXkilianProjectAppointmentsListElement;
        "xcastven-xkilian-project-calendar": HTMLXcastvenXkilianProjectCalendarElement;
        "xcastven-xkilian-project-condition-detail": HTMLXcastvenXkilianProjectConditionDetailElement;
        "xcastven-xkilian-project-conditions-list": HTMLXcastvenXkilianProjectConditionsListElement;
        "xcastven-xkilian-project-drawer": HTMLXcastvenXkilianProjectDrawerElement;
        "xcastven-xkilian-project-footer": HTMLXcastvenXkilianProjectFooterElement;
        "xcastven-xkilian-project-header": HTMLXcastvenXkilianProjectHeaderElement;
        "xcastven-xkilian-project-home-page": HTMLXcastvenXkilianProjectHomePageElement;
        "xcastven-xkilian-project-legend": HTMLXcastvenXkilianProjectLegendElement;
        "xcastven-xkilian-project-login": HTMLXcastvenXkilianProjectLoginElement;
        "xcastven-xkilian-project-prescription-detail": HTMLXcastvenXkilianProjectPrescriptionDetailElement;
        "xcastven-xkilian-project-prescriptions-list": HTMLXcastvenXkilianProjectPrescriptionsListElement;
        "xcastven-xkilian-project-register": HTMLXcastvenXkilianProjectRegisterElement;
    }
}
declare namespace LocalJSX {
    interface AmbulanceApp {
    }
    interface XcastvenXkilianAppointmentScheduler {
    }
    interface XcastvenXkilianProjectAppointmentDetail {
        "appointmentId"?: string;
        "handleCancelAppointment"?: (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleRescheduleAppointment"?: (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleResetSelection"?: () => void;
    }
    interface XcastvenXkilianProjectAppointmentsList {
        "appointments"?: Array<AppointmentDisplay>;
        "handleSelectAppointment"?: (appointment: AppointmentDisplay) => void;
    }
    interface XcastvenXkilianProjectCalendar {
        "appointments"?: Array<AppointmentDisplay>;
        "conditions"?: Array<ConditionDisplay>;
        "currentViewMonth"?: number;
        "currentViewYear"?: number;
        "getConditionsForDate"?: (date: Date) => Array<ConditionDisplay>;
        "getPrescriptionsForDate"?: (date: Date) => Array<PrescriptionDisplay>;
        "handleNextMonth"?: () => void;
        "handlePreviousMonth"?: () => void;
        "handleSelectAppointment"?: (appointment: AppointmentDisplay) => void;
        "handleSelectCondition"?: (condition: ConditionDisplay) => void;
        "handleSelectDate"?: (date: Date) => void;
        "handleSelectPrescription"?: (prescription: PrescriptionDisplay) => void;
        "hoveredConditionId"?: string;
        "hoveredPrescriptionId"?: string;
        "prescriptions"?: Array<PrescriptionDisplay>;
        "setHoveredConditionId"?: (value: string | null) => void;
        "setHoveredPrescriptionId"?: (value: string | null) => void;
    }
    interface XcastvenXkilianProjectConditionDetail {
        "conditionId"?: string;
        "handleResetSelection"?: () => void;
        "handleScheduleAppointmentFromCondition"?: (condition: Condition) => void;
        "handleSelectAppointment"?: (appointment: AppointmentDisplay) => void;
        "handleToggleConditionStatus"?: () => void;
    }
    interface XcastvenXkilianProjectConditionsList {
        "conditions"?: Array<ConditionDisplay>;
        "handleSelectCondition"?: (condition: ConditionDisplay) => void;
    }
    interface XcastvenXkilianProjectDrawer {
        "getAppointmentsForDate"?: (date: Date) => Array<AppointmentDisplay>;
        "getConditionsForDate"?: (date: Date) => Array<ConditionDisplay>;
        "getPrescriptionsForDate"?: (date: Date) => Array<PrescriptionDisplay>;
        "handleCancelAppointment"?: (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleRescheduleAppointment"?: (appointment: PatientAppointment | DoctorAppointment) => void;
        "handleResetSelection"?: () => void;
        "handleScheduleAppointmentFromCondition"?: (condition: Condition) => void;
        "handleSelectAppointment"?: (appointment: AppointmentDisplay) => void;
        "handleSelectCondition"?: (condition: ConditionDisplay) => void;
        "handleSelectPrescription"?: (prescription: PrescriptionDisplay) => void;
        "handleToggleConditionStatus"?: () => void;
        "isDrawerOpen"?: boolean;
        "selectedAppointment"?: AppointmentDisplay;
        "selectedCondition"?: ConditionDisplay;
        "selectedDate"?: Date;
        "selectedPrescription"?: PrescriptionDisplay;
        "showLegend"?: boolean;
    }
    interface XcastvenXkilianProjectFooter {
        "handleRegisterCondition"?: () => void;
        "handleScheduleAppointment"?: () => void;
        "handleToggleLegendMenu"?: () => void;
    }
    interface XcastvenXkilianProjectHeader {
        "currentViewMonth"?: number;
        "currentViewYear"?: number;
        "handleNextMonth"?: () => void;
        "handlePreviousMonth"?: () => void;
        "handleYearChange"?: (event: Event) => void;
    }
    interface XcastvenXkilianProjectHomePage {
    }
    interface XcastvenXkilianProjectLegend {
        "handleResetSelection"?: () => void;
    }
    interface XcastvenXkilianProjectLogin {
    }
    interface XcastvenXkilianProjectPrescriptionDetail {
        "handleResetSelection"?: () => void;
        "prescriptionId"?: string;
    }
    interface XcastvenXkilianProjectPrescriptionsList {
        "handleSelectPrescription"?: (prescription: PrescriptionDisplay) => void;
        "prescriptions"?: Array<PrescriptionDisplay>;
    }
    interface XcastvenXkilianProjectRegister {
    }
    interface IntrinsicElements {
        "ambulance-app": AmbulanceApp;
        "xcastven-xkilian-appointment-scheduler": XcastvenXkilianAppointmentScheduler;
        "xcastven-xkilian-project-appointment-detail": XcastvenXkilianProjectAppointmentDetail;
        "xcastven-xkilian-project-appointments-list": XcastvenXkilianProjectAppointmentsList;
        "xcastven-xkilian-project-calendar": XcastvenXkilianProjectCalendar;
        "xcastven-xkilian-project-condition-detail": XcastvenXkilianProjectConditionDetail;
        "xcastven-xkilian-project-conditions-list": XcastvenXkilianProjectConditionsList;
        "xcastven-xkilian-project-drawer": XcastvenXkilianProjectDrawer;
        "xcastven-xkilian-project-footer": XcastvenXkilianProjectFooter;
        "xcastven-xkilian-project-header": XcastvenXkilianProjectHeader;
        "xcastven-xkilian-project-home-page": XcastvenXkilianProjectHomePage;
        "xcastven-xkilian-project-legend": XcastvenXkilianProjectLegend;
        "xcastven-xkilian-project-login": XcastvenXkilianProjectLogin;
        "xcastven-xkilian-project-prescription-detail": XcastvenXkilianProjectPrescriptionDetail;
        "xcastven-xkilian-project-prescriptions-list": XcastvenXkilianProjectPrescriptionsList;
        "xcastven-xkilian-project-register": XcastvenXkilianProjectRegister;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ambulance-app": LocalJSX.AmbulanceApp & JSXBase.HTMLAttributes<HTMLAmbulanceAppElement>;
            "xcastven-xkilian-appointment-scheduler": LocalJSX.XcastvenXkilianAppointmentScheduler & JSXBase.HTMLAttributes<HTMLXcastvenXkilianAppointmentSchedulerElement>;
            "xcastven-xkilian-project-appointment-detail": LocalJSX.XcastvenXkilianProjectAppointmentDetail & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectAppointmentDetailElement>;
            "xcastven-xkilian-project-appointments-list": LocalJSX.XcastvenXkilianProjectAppointmentsList & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectAppointmentsListElement>;
            "xcastven-xkilian-project-calendar": LocalJSX.XcastvenXkilianProjectCalendar & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectCalendarElement>;
            "xcastven-xkilian-project-condition-detail": LocalJSX.XcastvenXkilianProjectConditionDetail & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectConditionDetailElement>;
            "xcastven-xkilian-project-conditions-list": LocalJSX.XcastvenXkilianProjectConditionsList & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectConditionsListElement>;
            "xcastven-xkilian-project-drawer": LocalJSX.XcastvenXkilianProjectDrawer & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectDrawerElement>;
            "xcastven-xkilian-project-footer": LocalJSX.XcastvenXkilianProjectFooter & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectFooterElement>;
            "xcastven-xkilian-project-header": LocalJSX.XcastvenXkilianProjectHeader & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectHeaderElement>;
            "xcastven-xkilian-project-home-page": LocalJSX.XcastvenXkilianProjectHomePage & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectHomePageElement>;
            "xcastven-xkilian-project-legend": LocalJSX.XcastvenXkilianProjectLegend & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectLegendElement>;
            "xcastven-xkilian-project-login": LocalJSX.XcastvenXkilianProjectLogin & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectLoginElement>;
            "xcastven-xkilian-project-prescription-detail": LocalJSX.XcastvenXkilianProjectPrescriptionDetail & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectPrescriptionDetailElement>;
            "xcastven-xkilian-project-prescriptions-list": LocalJSX.XcastvenXkilianProjectPrescriptionsList & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectPrescriptionsListElement>;
            "xcastven-xkilian-project-register": LocalJSX.XcastvenXkilianProjectRegister & JSXBase.HTMLAttributes<HTMLXcastvenXkilianProjectRegisterElement>;
        }
    }
}
